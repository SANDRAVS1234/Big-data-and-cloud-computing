# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sEdP-9T-Xx9QAe42r68neE4o6UpxdfO4
"""

import streamlit as st
import pandas as pd
import requests
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import time

# ------------------------
# Streamlit UI
# ------------------------
st.set_page_config(page_title="Real-Time News Sentiment Dashboard", layout="wide")
st.title("üì∞ Real-Time News Sentiment Dashboard")

# Refresh interval (seconds)
REFRESH_INTERVAL = 30

# GNews API Key
API_KEY = "YOUR_API_KEY"  # <-- Replace with your GNews API Key
URL = f"https://gnews.io/api/v4/top-headlines?country=in&max=10&apikey={API_KEY}"

# Initialize VADER
analyzer = SentimentIntensityAnalyzer()


# ------------------------
# Helper Functions
# ------------------------
def get_sentiment(text: str) -> str:
    """Return sentiment label based on VADER compound score."""
    score = analyzer.polarity_scores(text)["compound"]
    return "Positive" if score >= 0.0 else "Negative"


def color_sentiment(val: str) -> str:
    """Return style for sentiment column."""
    color = "green" if val == "Positive" else "red"
    return f"color: {color}"


# ------------------------
# Streamlit containers
# ------------------------
news_container = st.empty()
chart_container = st.empty()

# ------------------------
# Auto-refresh loop
# ------------------------
while True:
    try:
        response = requests.get(URL)
        data = response.json()
        articles = data.get("articles", [])

        if articles:
            df = pd.DataFrame(articles)

            if "description" not in df.columns:
                df["description"] = ""

            # Combine title + description
            df["full_text"] = df["title"] + " " + df["description"]
            df["sentiment"] = df["full_text"].apply(get_sentiment)

            # Styled DataFrame
            styled_df = df[["title", "sentiment"]].style.applymap(color_sentiment, subset=["sentiment"])

            # Display latest news
            news_container.subheader("üì∞ Latest News with Sentiment")
            news_container.dataframe(styled_df, use_container_width=True)

            # Display sentiment chart
            chart_container.subheader("üìä Sentiment Distribution")
            chart_container.bar_chart(df["sentiment"].value_counts())

        else:
            news_container.warning("‚ö†Ô∏è No news fetched. Check your API key or internet connection.")

    except Exception as e:
        news_container.error(f"Error fetching news: {e}")

    time.sleep(REFRESH_INTERVAL)